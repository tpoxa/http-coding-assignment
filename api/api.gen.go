// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	// Password Password
	Password string `json:"password"`

	// Username A unique username
	Username string `json:"username"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// Token A valid JWT that can be used for access.
	Token string `json:"token"`
}

// SumRequest defines model for SumRequest.
type SumRequest = map[string]interface{}

// SumResponse defines model for SumResponse.
type SumResponse struct {
	Sum float32 `json:"sum"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody = AuthRequest

// SumJSONRequestBody defines body for Sum for application/json ContentType.
type SumJSONRequestBody = SumRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth)
	Authenticate(ctx echo.Context) error

	// (GET /health)
	CheckHealth(ctx echo.Context) error

	// (POST /sum)
	Sum(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authenticate converts echo context to params.
func (w *ServerInterfaceWrapper) Authenticate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authenticate(ctx)
	return err
}

// CheckHealth converts echo context to params.
func (w *ServerInterfaceWrapper) CheckHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckHealth(ctx)
	return err
}

// Sum converts echo context to params.
func (w *ServerInterfaceWrapper) Sum(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Sum(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth", wrapper.Authenticate)
	router.GET(baseURL+"/health", wrapper.CheckHealth)
	router.POST(baseURL+"/sum", wrapper.Sum)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVa3OiShP+K1O878dckJBE/YYmGt2IUfHG1tbWAI0MwgzODKLZyn8/NZCLWd3aPXXO",
	"+cYwfXmm++mnf2g+SzNGgUqhNX9owo8gxeWnlctoDJschFTHjLMMuCRQXmZYiILxQH0HIHxOMkkY1Zra",
	"09vNmSb3GWhNTUhO6Ep7OdNyAZziFI69LJRTsskBvZscub+caRw2OeEQaM2v2oHhO5hv707Mi8GXKmf1",
	"DJExKuD4HZKtgZ6Cs8UJCVB/7iAZYYl8TJFXogtQyDjCvg9CXPwWZRX/FK5Jnh5U9/T1r1CLPD1wonnq",
	"AT9KrYyOE7+caQL8nBO5n6heVwE9wBy4KtXHqcN4iqXW1PpzRzurmKEiVbcfL4+kzLQXFZjQkJW4iEyg",
	"coyASuJjyZTDFrio6lu70C909UyWAcUZ0ZraVflLNVNGJaZL/AonY1WNfmpRLt+Cq74QunrnDsI0QBku",
	"OaFapEqHlVsv+MlRq0oGQrZYsFdJfEYl0DIfzrJEWRFGL2PB6Md8qK//cwi1pva/y48BunydnsvD0Skr",
	"80vohFHkcwjUESdCO2yh5DmUPa1oUBbF0PU/QAk7nGYJHBBcg31fh4VFhqT/ZVYbkcd2P/K6vjpPps+9",
	"mk36jQtl5Bky8ZJG5rZ7N714vRvOl+Zw3jOHTmu9jMeJHa+uB8/W1fJ5tV86o9ogvr9exiuzRwqC5+PE",
	"o+PMTZPEJ72bXholXne3re46ei9mOzu2Cjv29eHd2nhs9xN4sMgwvjcGd5ZhPy+NoeM2LpzxYue1C+iP",
	"RwmefY9Tw+kkdihDbumj6w1/knTg7r7zq73hTnc9zx0V+i3Va6OBeTVwoNDdTeN+F0rb9dqBvmVJfeHc",
	"FgO8drfu3RNbB7dd2dgG16Flz3nt8WFwTu925ng23VimE06Kp9l4yHduXGBKhe3emk7bcgcLL91eZYa7",
	"ymfjxYC2HmvkumP06pFVwODZuOl18tE63EbO4/56aJ3PO7PC2jLDXJi+Fa6N5/PR1vJXPpdf7M7NzTSy",
	"28E02LduiTQmbGNzfcPq3dzNXbt1DnG9GJi0Vm9s598pn9WejF2oR/P9o4mDbOHK4bSlryy66t47kTk3",
	"loO6aO2t7DY07sGetItMhsnDU55tx43Qhys3HxZq4P4OgV/l5/cMFnkph2GeJCqHWZH0s0uPVpLK3+ZC",
	"2dWO7aZvQ8w4ehN2RAQi1Gecgy8vFKCXM+0yApxUCrGCEwLRBfmWDEmGBACSESABfAtcRawGKyB0dYGc",
	"SKUQn3Te26M75q+BKyhf6hNUJUR+BP5aHAtLW/1/qECdHtvPAOeMr6udUT7nVdRPq10XpKjg5yliIcJJ",
	"girdF6iIiB+h/mRoo0rlUYr3SEkEJvQY5iRP/yPZO1hpJzjjRIAw94jkmO8ruAHz81Sl/ddlryxmzTT+",
	"mPGH+/YE+EnF8H/Mbiunaq0xTgQEn7ax1vz6eQ9//fbyTVHjrwAAAP//Hgd7/KMJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
