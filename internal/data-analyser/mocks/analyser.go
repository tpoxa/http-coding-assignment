// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// IDataAnalyser is an autogenerated mock type for the IDataAnalyser type
type IDataAnalyser struct {
	mock.Mock
}

// CalcSum provides a mock function with given fields: ctx, r
func (_m *IDataAnalyser) CalcSum(ctx context.Context, r io.Reader) (float64, error) {
	ret := _m.Called(ctx, r)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) (float64, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) float64); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIDataAnalyser interface {
	mock.TestingT
	Cleanup(func())
}

// NewIDataAnalyser creates a new instance of IDataAnalyser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIDataAnalyser(t mockConstructorTestingTNewIDataAnalyser) *IDataAnalyser {
	mock := &IDataAnalyser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
